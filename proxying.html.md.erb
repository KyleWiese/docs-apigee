---
title: Proxying a PCF Application with Apigee Edge
owner: Partners
---

<strong><%= modified_date %></strong>

This topic describes how to push a sample application to Pivotal Cloud Foundry (PCF), create an Apigee Edge service instance, and bind the application to it. After binding the application to the Apigee Edge service instance, requests to the application will be forwarded to an Apigee Edge API proxy for management.

Before performing the procedures in this topic, you must [install and configure](installing.html) the Apigee Edge Service Broker for PCF tile.

## <a id="push-sample"></a>Step 1: Push the Sample Application

Perform the following steps to push a sample application to PCF. 

1. Clone the Apigee Edge GitHub repo:
    <pre class="terminal">$ git clone <span>https</span>://github.com/apigee/pivotal-cf-apigee.git</pre>

1. Change into the `sample-api` directory of the cloned repo:
    <pre class="terminal">$ cd pivotal-cf-apigee/sample-api</pre>
1. In the `sample-api` directory, open `manifest.yml`.
1. Edit `manifest.yml` to change the `name` and `host` properties to values specific to your deployment. See the following example:

        applications: 
        - name: sample-api 
        memory: 128M 
        instances: 1 
        host: sample-api-apigee 
        path: . 
        buildpack: nodejs_buildpack
1. Save the edited file.
1. Set your API endpoint to the Cloud Controller of your deployment.
  <pre class="terminal">
  $ cf api api.YOUR-SYSTEM-DOMAIN
  Setting api endpoint to api.YOUR-SYSTEM-DOMAIN...
  OK
  API endpoint:  <span>https:</span>//api.YOUR-SYSTEM-DOMAIN (API version: 2.59.0)
  Not logged in. Use 'cf login' to log in.
  </pre>
1. Log in to your deployment and select an org and a space.
  <pre class="terminal">
  $ cf login
  API endpoint: <span>https:</span>//api.YOUR-SYSTEM-DOMAIN
  Email> user<span>@</span>example.com
  Password>
  </pre>

1. Push the sample application:
    <pre class="terminal">$ cf push YOUR-SAMPLE-APP</pre>
1. Use curl to send a request to the application you pushed:
    <pre class="terminal">
    $ curl YOUR-SAMPLE-APP.YOUR-SYSTEM-DOMAIN
    {"hello":"hello from cf app"} 
    </pre>
    If you receive the above response, the sample application is successfully running.

## <a id="create-instance"></a>Step 2: Create a Service Instance

Perform the following steps to create an instance of the Apigee Edge service:

1. List the Marketplace services and locate the Apigee Edge service:

    <pre class="terminal">
    $ cf marketplace
    Getting services from marketplace in org example / space development as user<span>@</span>example.com...
    OK

    service          plans                     description
    apigee-edge      org, microgateway         Apigee Edge API Platform
    </pre>

1. Create an instance of the Apigee Edge service. Select either the `org` or `microgateway` service plan. Use the `org` plan when proxying through Apigee Edge Cloud. Use the `microgateway` plan when proxying through Apigee Edge Microgateway. The example below uses the `org` plan:

    <pre class="terminal">$ cf create-service apigee-edge org YOUR-SERVICE-INSTANCE</pre>

1. Use the `cf service` command to display information about the service instance:

    <pre class="terminal">
    $ cf service apigee-service

    Service instance: apigee-service
    Service: apigee-edge
    Bound apps:
    Tags:
    Plan: org
    Description: Apigee Edge API Platform
    Documentation url: http://apigee.com/docs/
    Dashboard: https://enterprise.apigee.com/platform/#/

    Last Operation
    Status: create succeeded
    Message:
    Started: 2016-10-27T20:47:43Z
    Updated:
    </pre>

## <a id="bind-app-route"></a>Step 3: Bind the Application Route to the Service Instance

Perform the following steps to bind the route of your application to the Apigee Service instance.

1. Download the Apigee Edge scripts:
    <pre class="terminal">$ curl https://login.apigee.com/resources/scripts/sso-cli/ssocli-bundle.zip -o "ssocli-bundle.zip"</pre>
1. Unzip the `ssocli-bundle.zip` file. This includes `get_token`, a script that gets or updates a token that you use to authenticate with your Apigee Edge organization. You need this token to bind the Apigee Edge route service to your 
    <pre class="terminal">$ tar xvf ssocli-bundle.zip</pre>
1. Create a `.sso-cli` directory in your user directory:
    <pre class="terminal">$ mkdir ~/.sso-cli</pre>
1. Use the `get_token` script to create a token. Enter the Apigee Edge username and password you use to log in to your organization when prompted. The script writes the token to a file in `~/.sso-cli`.
    <pre class="terminal">$ ./get_token</pre>
    For more about `get_token`, see the [Apigee documentation](http://docs.apigee.com/api-services/content/using-oauth2-security-apigee-edge-management-api).

1. Use the `bind-route-service` command to create an Apigee Edge API proxy and bind your Cloud Foundry application to the proxy.

 This tells the Cloud Foundry Go router to redirect requests to the Apigee Edge proxy before sending them to the Cloud Foundry application.

 ```
cf bind-route-service cfapps.pivotal.io apigee-service --hostname sample-api-apigee -c '{"org":"my_edge_org","env":"my_edge_env", "bearer":"'$(cat ~/.sso-cli/valid_token.dat)'", "action":"proxy bind"}' 
```

 ... where `apigee-service` is the name of the Apigee Edge service instance you created earlier and `sample-api-apigee` is host you specified in your manifest.yml.
 
 You should see output such as the following:

 ```
 Binding route sample-api-apigee.cfapps.pivotal.io to service instance apigee-service in org apigee / space test as admin...
OK
 ```

 In these steps, you'll create an instance of the Apigee Edge service. Then you'll create a new API proxy and bind the service to Apigee Edge. That way, request to your Cloud Foundry app will be forwarded to the new API proxy for management.
In this step, you bind the Cloud Foundry app's route (its address in Cloud Foundry) to the Apigee service instance you created. That way, requests to the app will be forwarded first to an Edge proxy. The bind-route-service command creates the proxy for you and binds the route to it.


## <a id="test-binding"></a>Test the binding

Once you've bound the app's path to the Apigee service (creating an Apigee proxy in the process), you can try it out with the sample app you invoked earlier.

1. Open the Apigee Edge management console.
1. In the management console, under **APIs > API proxies**, locate the name of the proxy you just created with `bind-route-service`. It's likely to have a name that ends with your domain value, such as `cfapps.pivotal.io`.
1. Click the new proxy's name to view its overview page.
1. Click the **Trace** tab, then click the **Start Trace Session** button.
1. Back at the command line, run the cURL command you ran earlier -- the one that makes a request to the Cloud Foundry application you pushed, such as.

 ```
 curl https://sample-api-apigee.cfapps.pivotal.io 
 ```

 As before, the console will display the app's response.

 ```
 {"hello":"hello from cf app"} 
 ```

1. Return to the Apigee Edge management console to see that your request has now been routed through the Edge proxy you created.


The new proxy is just a pass-through. But it's ready for you or someone on your team to add policies to define security, traffic management, and more.