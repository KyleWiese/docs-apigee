---
title: Proxying a PCF App with Apigee Edge
owner: Partners
---

<strong><%= modified_date %></strong>

This topic describes how to push a sample app to Pivotal Cloud Foundry (PCF), create an Apigee Edge service instance, and bind the application to it. After binding the application to the Apigee Edge service instance, requests to the app will be forwarded to an Apigee Edge API proxy for management.

Before performing the procedures in this topic, you must [install and configure](installing.html) the Apigee Edge Service Broker for PCF tile.

## <a id="push-sample"></a>Step 1: Push the Sample App

Perform the following steps to push a sample application to PCF. 

1. Clone the Apigee Edge GitHub repo:
    <pre class="terminal">$ git clone <span>https:</span>//github.com/apigee/pivotal-cf-apigee.git</pre>

1. Change into the `sample-api` directory of the cloned repo:
    <pre class="terminal">$ cd pivotal-cf-apigee/sample-api</pre>

1. In the `sample-api` directory, open `manifest.yml`.

1. Edit `manifest.yml` to change the `name` and `host` properties to values specific to your deployment. See the following example:

    ```
    applications: 
    - name: sample-api 
      memory: 128M 
      instances: 1 
      host: sample-api-apigee 
      path: . 
      buildpack: nodejs_buildpack
    ```
1. Save the edited file.

1. Set your API endpoint to the Cloud Controller of your deployment.
  <pre class="terminal">
  $ cf api api.YOUR-SYSTEM-DOMAIN
  Setting api endpoint to api.YOUR-SYSTEM-DOMAIN...
  OK
  API endpoint:  <span>https:</span>//api.YOUR-SYSTEM-DOMAIN (API version: 2.59.0)
  Not logged in. Use 'cf login' to log in.
  </pre>

1. Log in to your deployment and select an org and a space.
  <pre class="terminal">
  $ cf login
  API endpoint: <span>https:</span>//api.YOUR-SYSTEM-DOMAIN
  Email> user<span>@</span>example.com
  Password>
  </pre>

1. Push the sample app to PCF:
    <pre class="terminal">$ cf push YOUR-SAMPLE-APP</pre>

1. Use `curl` to send a test request to the app you pushed:
    <pre class="terminal">
    $ curl YOUR-SAMPLE-APP.YOUR-SYSTEM-DOMAIN
    {"hello":"hello from cf app"} 
    </pre>
    If you receive the above response, the sample app is running successfully.

## <a id="create-instance"></a>Step 2: Create a Service Instance

Perform the following steps to create an instance of the Apigee Edge service:

1. List the Marketplace services and locate the Apigee Edge service:

    <pre class="terminal">
    $ cf marketplace
    Getting services from marketplace in org example / space development as user<span>@</span>example.com...
    OK

    service          plans                     description
    apigee-edge      org, microgateway         Apigee Edge API Platform
    </pre>

1. Create an instance of the Apigee Edge service. Select the `microgateway-coresident` service plan to have Apigee Edge Microgateway run in the same container as your Cloud Foundry app.

    <pre class="terminal">cf create-service apigee-edge microgateway-coresident <service-name> -c \
        '{"org":<org from service-broker configuration>, "env":<env from service-broker configuration>}'        
        $ cf create-service apigee-edge microgateway-coresident YOUR-SERVICE-INSTANCE -c \
    '{"org":"YOUR-ORG", "env":"YOUR-ENV"}'
cf service YOUR-SERVICE-INSTANCE</pre>

1. Use the `cf service` command to display information about the service instance:

    <pre class="terminal">
    $ cf service apigee-service

    Service instance: apigee-service
    Service: apigee-edge
    Bound apps:
    Tags:
    Plan: org
    Description: Apigee Edge API Platform
    Documentation url: http://apigee.com/docs/
    Dashboard: https://enterprise.apigee.com/platform/#/

    Last Operation
    Status: create succeeded
    Message:
    Started: 2016-10-27T20:47:43Z
    Updated:
    </pre>

## <a name="install-microgateway"></a>Step 3: Install Apigee Edge Microgateway and Cloud Foundry app
Here, you install Apigee Edge Microgateway and your Cloud Foundry app to the same Cloud Foundry container.

1. [Install and configure Apigee Edge Microgateway.](http://docs.apigee.com/microgateway/latest/installing-edge-microgateway)

1. Locate and make any desired changes to the configuration YAML file created in your Apigee Edge Microgateway installation, typically in the .edgemicro directory.

1. Copy the configuration file to the following directory in your Cloud Foundry app: `<application-folder>/<config-directory>`. 

1. Edit the application manifest as follows:

   1. Edit the following env values so that they correspond to your Apigee Edge Microgateway configuration:

        ```yaml
        env: 
          EDGEMICRO_CONFIG_DIR: '/app/<config-directory>'
          EDGEMICRO_ENV: 'your-microgateway-env-name'
          EDGEMICRO_ORG: 'your-microgateway-org-name'
        ```
   1. Remove the following or any other ``buildpack`` tags from the manifest:  

        ```yaml
        buildpack: nodejs_buildpack
        ```

1. Ensure that your Cloud Foundry app isn't running on port 8080, nor on the port specified by the PORT environment variable.

1. Push the Cloud Foundry app to your Cloud Foundry container.

    ```bash
    cf push <cf-app-name> --no-start
    ```

>**Note:** Once you have the service broker installed, you might be interested in using the sample app included in this repository to try it out. To do this, you'd replace the following steps with those in a [tutorial in the Apigee documentation](http://docs.apigee.com/api-services/content/creating-edge-api-proxy-manage-client-calls-your-cloud-foundry-application).

## <a id="bind-app-route"></a>Step 3: Bind the App Route to the Service Instance

Perform the following steps to bind the route of your app to your Apigee Edge service instance.

1. Download the Apigee Edge scripts:
    <pre class="terminal">$ curl <span>https:</span>//login.apigee.com/resources/scripts/sso-cli/ssocli-bundle.zip -o "ssocli-bundle.zip"</pre>
1. Unzip the `ssocli-bundle.zip` file. This includes `get_token`, a script that gets or updates a token that you use to authenticate with your Apigee Edge organization. You need this token to bind the Apigee Edge route service to your 
    <pre class="terminal">$ tar xvf ssocli-bundle.zip</pre>
1. Create a `.sso-cli` directory in your user directory:
    <pre class="terminal">$ mkdir ~/.sso-cli</pre>
1. Use the `get_token` script to create a token. When prompted, enter the Apigee Edge username and password you use to log in to your organization.
    <pre class="terminal">$ ./get\_token</pre>  
    The `get_token` script writes the token file into `~/.sso-cli`. For more about `get_token`, see the [Apigee documentation](http://docs.apigee.com/api-services/content/using-oauth2-security-apigee-edge-management-api).
1. Use the `bind-service` command to create an Apigee Edge API proxy and bind your Cloud Foundry app to the proxy. This tells the Gorouter to redirect requests to the Apigee Edge proxy before sending them to the Cloud Foundry application. (See the reference on this page for more about this command.)
    <pre class="terminal">
    cf bind-service APP-NAME APIGEE-SERVICE \
    -c '{"org":MICROGATEWAY-ORG,"env":MICROGATEWAY-ENV,
      "bearer":"'$(cat ~/.sso-cli/valid_token.dat)'", 
      "action":"proxy bind", 
      "protocol":"https", 
      "target_route":CF-ROUTE-URL, 
      "edgemicro_key":MICROGATEWAY-KEY, 
      "edgemicro_secret":MICROGATEWAY-SECRET, 
      "target_port":CF-APP-PORT}'
    </pre>
    * For APIGEE-SERVICE, use the name of the Apigee Edge service instance you created earlier
    * For SAMPLE-APP-APIGEE, use the name of the host you specified in your manifest.yml
 
The output from `bind-route-service` should confirm that you have bound the route of your app to your Apigee Edge service instance.

### bind-service reference
When binding to an Apigee API proxy, the `bind-route-service` command follows this form (be sure to use quotes and command expansion, as shown here):
    
<pre class="terminal">
$ cf bind-service YOUR-APP-NAME SERVICE-INSTANCE \
    cf start APP-NAME
    -c '{"org":MICROGATEWAY-ORG,"env":MICROGATEWAY-ENV,
      "bearer":"'$(cat ~/.sso-cli/valid_token.dat)'", 
      "action":"proxy bind", 
      "protocol":"https", 
      "target_route":CF-ROUTE-URL, 
      "edgemicro_key":MICROGATEWAY-KEY, 
      "edgemicro_secret":MICROGATEWAY-SECRET, 
      "target_port":CF-APP-PORT}'
</pre>

Parameters for the `-c` argument specify connection details:

Parameter | Purpose | Allowed Values
---- | ---- | ----
`action` | A value specifying whether to create or bind an API proxy | `proxy` to generate an API proxy; `bind` to bind the service with the proxy; `proxy bind` to generate the proxy and bind with a single command.
`bearer` | Path to a file containing an authentication token valid for your organization | An authentication token, such as one generated with Apigee's get_token command. The broker does not store any data; it requires credentials and other parameters for each individual `cf` command. Instead of a `bearer` token, credentials can also be expressed as:<ul><li>`basic`: standard HTTP Base-64 encoded username and password for `Authorization: Basic`. Note that this is *not encrypted* and easily converted to clear text. But a jumble of digits and letters may provide some protection in case of momentary exposure (but no better than if the password is already a jumble of digits, letters, and symbols)</li><li>username and password in clear text</li></ul>
`edgemicro_key` | The key for your Apigee Edge Microgateway configuration (returned when you configured the Apigee Microgateway). | The configuration key.
`edgemicro_secret` | The secret for your Apigee Edge Microgateway configuration (returned when you configured the Apigee Microgateway). | The configuration secret.
`env` | Apigee Edge environment to which the API proxy is (or will be) deployed | Your environment.
`org` | Apigee Edge organization hosting the API proxy to be called |  Your organization (must be reachable via the authentication token specified in he `bearer` parameter).
`protocol` | The protocol through which the proxy's target endpoint should be accessed by Cloud Foundry. | `http` or `https`; default is `https`.
`target_port` | Port for your Cloud Foundry app. This may not be 8080 nor the PORT environment variable. | The port number.
`target_route` | The URL for your Cloud Foundry app. | The app URL.

## <a id="test-binding"></a>Step 4: Test the Binding

Once you've bound your app's path to the Apigee service (creating an Apigee proxy in the process), you can try it out with the sample app you invoked earlier.

1. Open the Apigee Edge management console.
1. In the management console, under **APIs > API proxies**, locate the name of the proxy you just created with `bind-service`. It's likely to have a name that ends with your domain value, such as `cfapps.pivotal.io`.
1. Click the new proxy's name to view its **Overview** page.
1. Click the **Trace** tab, then click the **Start Trace Session** button.
1. Back at the command line, run the `curl` command you ran earlier to make a request to your Cloud Foundry app you pushed, such as:
  <pre class="terminal">
  $ curl <span>https:</span>//sample-api-apigee.cfapps.pivotal.io 
  {"hello":"hello from cf app"} 
  </pre>
  As before, the console outputs the app's response.

1. Return to the Apigee Edge management console to see that your request has now been routed through the Edge proxy you created.


The new proxy is just a pass-through, but it is now ready for you or someone on your team to add policies to define security, traffic management, and more.
